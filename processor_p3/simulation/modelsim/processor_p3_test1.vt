// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/27/2018 19:27:48"
                                                                                
// Verilog Test Bench template for design : processor_p3
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module processor_p3_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clock;
reg [2:0] cond;
reg d_or_data;
reg [15:0] data1;
reg [15:0] data2;
reg [3:0] dBack;
reg [3:0] dFront_op3;
reg exec;
reg [1:0] op1;
reg [2:0] op2;
reg p3;
reg p4;
reg [15:0] PC;
reg pc_or_data;
reg reset;
// wires                                               
wire [15:0]  ALU_out;
wire C;
wire C_out;
wire clock_out;
wire [31:0]  LED;
wire S;
wire S_out;
wire selecter;
wire V;
wire V_out;
wire Z;
wire Z_out;

// assign statements (if any)                          
processor_p3 i1 (
// port map - connection between master ports and signals/registers   
	.ALU_out(ALU_out),
	.C(C),
	.C_out(C_out),
	.clock(clock),
	.clock_out(clock_out),
	.cond(cond),
	.d_or_data(d_or_data),
	.data1(data1),
	.data2(data2),
	.dBack(dBack),
	.dFront_op3(dFront_op3),
	.exec(exec),
	.LED(LED),
	.op1(op1),
	.op2(op2),
	.p3(p3),
	.p4(p4),
	.PC(PC),
	.pc_or_data(pc_or_data),
	.reset(reset),
	.S(S),
	.S_out(S_out),
	.selecter(selecter),
	.V(V),
	.V_out(V_out),
	.Z(Z),
	.Z_out(Z_out)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin
clock <= 1'b0;
reset <= 1'b0;
exec <= 1'b0;
dFront_op3 <= 4'b0000;
dBack <= 4'b0100;
op1 <= 2'b11;
op2 <= 3'b000;
cond <= 3'b001;
d_or_data <= 1'b0;
pc_or_data <= 1'b0;
PC <= 16'b0000000000000001;
data1 <= 16'b0001000100010001;
data2 <= 16'b0001000100010001;
p3 <= 1'b1;
p4 <= 1'b0;
                                                       
@eachvec;                                              
// --> end                                             
end

always begin
#100
clock <= ~clock;
#100
clock <= ~clock;
p3 <= 1'b0;
p4 <= 1'b0;
#100
clock <= ~clock;
#100
clock <= ~clock;
p3 <= 1'b0;
p4 <= 1'b0;
op1 <= 2'b11;
data1 <= 16'b0001000100010001;
data2 <= 16'b0001000100010001;
#100
clock <= ~clock;
#100
clock <= ~clock;
p3 <= 1'b1;
p4 <= 1'b0;
#100
clock <= ~clock;
#100
clock <= ~clock;
p3 <= 1'b0;
p4 <= 1'b1;
#100
clock <= ~clock;
#100
clock <= ~clock;
p3 <= 1'b0;
p4 <= 1'b0;

#100
clock <= ~clock;
#100
clock <= ~clock;
p3 <= 1'b0;
p4 <= 1'b0;
#100
clock <= ~clock;
#100
clock <= ~clock;
p3 <= 1'b0;
p4 <= 1'b0;
op1 <= 2'b10;
cond <= 3'b000;
d_or_data <= 1'b1;
pc_or_data <= 1'b1;
data1 <= 16'b0001000100010001;
data2 <= 16'b0001000100010001;
#100
clock <= ~clock;
#100
clock <= ~clock;
p3 <= 1'b1;
p4 <= 1'b0;
#100
clock <= ~clock;
#100
clock <= ~clock;
p3 <= 1'b0;
p4 <= 1'b1;
#100
clock <= ~clock;
#100
clock <= ~clock;
p3 <= 1'b0;
p4 <= 1'b0;
end
endmodule
